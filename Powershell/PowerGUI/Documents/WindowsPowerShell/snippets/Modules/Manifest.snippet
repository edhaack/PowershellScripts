<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Manifest</Title>
      <Shortcut>psd1</Shortcut>
      <Description>Define a module manifest (for inclusion in a psd1 file)</Description>
      <Author>Quest Software, Inc.</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <Default>MyModule</Default>
          <ToolTip>The script or binary module file that the user will associate with this manifest. It is also referred to as the root module for the manifest when nested modules are used. The name of the root module does not have to be the same as the manifest. However, the manifest and the module folder should have the same name. 

If no module is specified, the manifest file becomes the root module. In this case, the module is referred to as a manifest module.</ToolTip>
        </Literal>
        <Literal>
          <ID>modulePath</ID>
          <Default>C:\MyModule.psm1</Default>
          <ToolTip>The path to the module (psm1) file</ToolTip>
        </Literal>
        <Literal>
          <ID>moduleVersion</ID>
          <Default>1.0.0.0</Default>
          <ToolTip>The version number of the module</ToolTip>
        </Literal>
        <Literal>
          <ID>guid</ID>
          <Default>Copy "{$([System.Guid]::NewGuid().ToString().ToLower())}" (including the quotes) into your PowerShell session and execute it, then paste the resulting GUID string here</Default>
          <ToolTip>The identifier of the module</ToolTip>
        </Literal>
        <Literal>
          <ID>author</ID>
          <Default>Your name or your company name goes here</Default>
          <ToolTip>The author of the module</ToolTip>
        </Literal>
        <Literal>
          <ID>companyName</ID>
          <Default>Your company name goes here</Default>
          <ToolTip>The name of the company or vendor of the module</ToolTip>
        </Literal>
        <Literal>
          <ID>copyright</ID>
          <Default>(c) 2011. All rights reserved.</Default>
          <ToolTip>The copyright information for the module</ToolTip>
        </Literal>
        <Literal>
          <ID>description</ID>
          <Default>Module description</Default>
          <ToolTip>A description of the module</ToolTip>
        </Literal>
        <Literal>
          <ID>psVersion</ID>
          <Default>2.0</Default>
          <ToolTip>Specifies the minimum version of Windows PowerShell that will work with this module. Enter 1.0 or 2.0. Requirements for versions greater than 2.0 are not enforced.</ToolTip>
        </Literal>
        <Literal>
          <ID>psHostName</ID>
          <Default>PowerGUI</Default>
          <ToolTip>The name of the Windows PowerShell host that is required by the module, such as "PowerGUIScriptEditorHost" or "PowerGUI" or "ConsoleHost". This name is provided by Windows PowerShell. To find the name of a host program, in the program, type: $host.name.</ToolTip>
        </Literal>
        <Literal>
          <ID>psHostVersion</ID>
          <Default>3.0.0.0</Default>
          <ToolTip>The minimum version number of the Windows PowerShell host that is required by the module</ToolTip>
        </Literal>
        <Literal>
          <ID>dotNetVersion</ID>
          <Default>2.0</Default>
          <ToolTip>The minimum version of the .NET Framework that is required by the module</ToolTip>
        </Literal>
        <Literal>
          <ID>clrVersion</ID>
          <Default>2.0.50727</Default>
          <ToolTip>The version of the .NET CLR that is required by the module</ToolTip>
        </Literal>
        <Literal>
          <ID>processorArchitecture</ID>
          <Default>None</Default>
          <ToolTip>The processor architecture that the module requires. Valid values are x86, AMD64, IA64, and None (unknown or unspecified).</ToolTip>
        </Literal>
        <Literal>
          <ID>requiredModules</ID>
          <Default>@()</Default>
          <ToolTip>Additional modules that this module requires to run. If the required modules are not in the global scope, attempts to import this module will fail. 

Enter each module name as a string, or enter a hash table with ModuleName and GUID keys. The hash table can also have an optional ModuleVersion key. Windows PowerShell does not import the required modules automatically. It only verifies that the required modules are present. However, modules can include scripts (.ps1) that import the required modules into the global scope.</ToolTip>
        </Literal>
        <Literal>
          <ID>requiredAssemblies</ID>
          <Default>@()</Default>
          <ToolTip>The assembly (.dll) files that the module requires, such as assemblies required by type and formatting files. Windows PowerShell loads the specified assemblies before it updates types or formats, before it imports nested modules, or before it imports the root module.

In addition, you should specify the assemblies that are required to be loaded to update formatting or type files listed in the FormatsToProcess or TypesToProcess keys, even if those assemblies are already listed as binary modules in the NestedModules key.</ToolTip>
        </Literal>
        <Literal>
          <ID>scriptsToProcess</ID>
          <Default>@()</Default>
          <ToolTip>The script (.ps1) files that are run in the caller's session state when the module is imported. You can use these scripts to prepare an environment, just as you might use a login script.</ToolTip>
        </Literal>
        <Literal>
          <ID>typesToProcess</ID>
          <Default>@()</Default>
          <ToolTip>The type files (.ps1xml) that are associated with the module. These files contain definitions of the .NET Framework types that are used by the components of the module, such as a type returned by a cmdlet. When you import the module, Windows PowerShell runs the Update-TypeData cmdlet with the specified type files.</ToolTip>
        </Literal>
        <Literal>
          <ID>formatsToProcess</ID>
          <Default>@()</Default>
          <ToolTip>The formatting files (.ps1xml) that are associated with the module. These files contain display information for .NET Framework types that are used by the components of the module. For example, these files specify whether a type returned by a cmdlet is displayed as a table or as a list. When you import the module, Windows PowerShell runs the Update-FormatData cmdlet with the specified files.</ToolTip>
        </Literal>
        <Literal>
          <ID>nestedModules</ID>
          <Default>@()</Default>
          <ToolTip>The script modules (.psm1) and binary modules (.dll) that are imported into the session state of the module but are not imported into the global session state. This means that nested modules are not visible to the user. The exported members of nested modules are imported into the root module session state, but they are not exported to the global session state unless the user uses the Global parameter of the Import-Module cmdlet or unless the root module exports the nested module members explicitly.

The files in the NestedModules key run in the order in which they are listed. This is important in cases where there are dependencies between nested modules. Also, script files (.ps1) that are listed in the NestedModules key are run in the session state of the module, not in the session state of the caller. To run a script in the caller session state, list the script file name in the ScriptsToProcess key.</ToolTip>
        </Literal>
        <Literal>
          <ID>functionsToExport</ID>
          <Default>'*'</Default>
          <ToolTip>A comma-delimited list of function names. Restricts the functions that the module exports to the session state of the caller. The caller's session state can be the global session state or, for nested modules, the session state of another module. When chaining nested modules, all functions that are exported by a nested module will be exported to the global session state unless a module in the chain restricts the function by using the FunctionsToExport key.

The value '*' means that all functions defined by the module, including any functions exported by a nested module, are exported to the caller's session state.</ToolTip>
        </Literal>
        <Literal>
          <ID>cmdletsToExport</ID>
          <Default>'*'</Default>
          <ToolTip>A comma-delimited list of cmdlet names. Restricts the cmdlets that the module exports to the session state of the caller. The caller's session state can be the global session state or, for nested modules, the session state of another module. When chaining nested modules, all cmdlets that are exported by a nested module will be exported to the global session state unless a module in the chain restricts the cmdlet by using the CmdletsToExport key.

The value '*' means that all cmdlets defined by the module, including any cmdlets exported by a nested module, are exported to the caller's session state.</ToolTip>
        </Literal>
        <Literal>
          <ID>variablesToExport</ID>
          <Default>'*'</Default>
          <ToolTip>A comma-delimited list of variable names. Restricts the variables that the module exports to the session state of the caller. The caller's session state can be the global session state or, for nested modules, the session state of another module. When chaining nested modules, all variables that are exported by a nested module will be exported to the global session state unless some module in the chain restricts the variable by using the VariablesToExport key.

The value '*' means that all variables defined by the module, including any variables exported by a nested module, are exported to the caller's session state.</ToolTip>
        </Literal>
        <Literal>
          <ID>aliasesToExport</ID>
          <Default>'*'</Default>
          <ToolTip>A comma-delimited list of alias names. Restricts the aliases that the module exports to the session state of the caller. The caller's session state can be the global session state or, for nested modules, the session state of another module. When chaining nested modules, all aliases that are exported by a nested module will be exported to the global session state unless a module in the chain restricts the alias by using the AliasesToExport key.

The value '*' means that all aliases defined by the module, including any aliases exported by a nested module, are exported to the caller's session state.</ToolTip>
        </Literal>
        <Literal>
          <ID>moduleList</ID>
          <Default>@()</Default>
          <ToolTip>All modules that are included in the module. These modules are not automatically exported with the module. This key is designed to act as a module inventory.</ToolTip>
        </Literal>
        <Literal>
          <ID>fileList</ID>
          <Default>@()</Default>
          <ToolTip>All files that are included in the module. These files are not automatically exported with the module. This key is designed to act as a file inventory.</ToolTip>
        </Literal>
        <Literal>
          <ID>privateData</ID>
          <Default>@{}</Default>
          <Tooltip>Data that is passed to the module when it is imported. This data is available using the $args automatic variable from within the script modules.</Tooltip>
        </Literal>
      </Declarations>
      <Code Language="powershell">
        <![CDATA[<#

	Module manifest for module '$name$'

	Created by: PowerGUI

	NOTE: This file should be saved with the same name as your module and a psd1
	file extension.

	For more information, see:
		Get-Help New-ModuleManifest

	Or for a complete description of the format, effects, and requirements of a
	module manifest, see the following documents in the MSDN (Microsoft Developer
	Network) library:
	
		How to Write a Module Manifest
		http://msdn.microsoft.com/en-us/library/dd878297(VS.85).aspx

		Module Manifest Example
		http://msdn.microsoft.com/en-us/library/dd878317(VS.85).aspx

#>

@{

# Script module or binary module file associated with this manifest
ModuleToProcess = '$modulePath$'

# Version number of this module.
ModuleVersion = '$moduleVersion$'

# ID used to uniquely identify this module
GUID = '$guid$'

# Author of this module
Author = '$author$'

# Company or vendor of this module
CompanyName = '$companyName$'

# Copyright statement for this module
Copyright = '$copyright$'

# Description of the functionality provided by this module
Description = '$description$'

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '$psVersion$'

<#
# Name of the Windows PowerShell host required by this module
PowerShellHostName = '$psHostName$'

# Minimum version of the Windows PowerShell host required by this module
PowerShellHostVersion = '$psHostVersion$'
#>

# Minimum version of the .NET Framework required by this module
DotNetFrameworkVersion = '$dotNetVersion$'

# Minimum version of the common language runtime (CLR) required by this module
CLRVersion = '$clrVersion$'

# Processor architecture (None, X86, Amd64, IA64) required by this module
ProcessorArchitecture = '$processorArchitecture$'

# Modules that must be imported into the global environment prior to importing
# this module
RequiredModules = $requiredModules$

# Assemblies that must be loaded prior to importing this module
RequiredAssemblies = $requiredAssemblies$

# Script files (.ps1) that are run in the caller's environment prior to
# importing this module
ScriptsToProcess = $scriptsToProcess$

# Type files (.ps1xml) to be loaded when importing this module
TypesToProcess = $typesToProcess$

# Format files (.ps1xml) to be loaded when importing this module
FormatsToProcess = $formatsToProcess$

# Modules to import as nested modules of the module specified in
# ModuleToProcess
NestedModules = $nestedModules$

# Functions to export from this module
FunctionsToExport = $functionsToExport$

# Cmdlets to export from this module
CmdletsToExport = $cmdletsToExport$

# Variables to export from this module
VariablesToExport = $variablesToExport$

# Aliases to export from this module
AliasesToExport = $aliasesToExport$

# List of all modules packaged with this module
ModuleList = $moduleList$

# List of all files packaged with this module
FileList = $fileList$

# Private data to pass to the module specified in ModuleToProcess
PrivateData = $privateData$

}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>